name: Publish to PyPI

# Triggered on release creation or manual dispatch
on:
  release:
    types: [created]
  workflow_dispatch:

# Environment variables for the entire workflow
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-C target-cpu=native"

# Required setup:
# 1. Create a PyPI account and enable two-factor authentication
# 2. Set up trusted publisher in PyPI project settings:
#    - Owner: [Your GitHub username/org]
#    - Repository: py-diffusionx
#    - Workflow name: Publish
#    - Environment: pypi
# 3. Create a 'pypi' environment in GitHub repository settings
#    Settings -> Environments -> New environment -> Name: pypi

jobs:
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12', '3.11', '3.10', '3.9']
        target: [x86_64, aarch64]
        exclude:
          - os: windows-latest
            target: aarch64
          - os: ubuntu-latest
            target: aarch64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: ${{ matrix.target == 'x86_64' && 'x86_64-unknown-linux-gnu' || 'aarch64-unknown-linux-gnu' }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "rust-cache-${{ matrix.target }}"

      - name: Print debugging information
        run: |
          pwd
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          ls -la $GITHUB_WORKSPACE
          find $GITHUB_WORKSPACE -name "Cargo.toml" | sort
          find $GITHUB_WORKSPACE -name "pyproject.toml" | sort

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install uv
          uv pip install --system pytest numpy matplotlib scipy jupyterlab ipykernel numba maturin sccache

      - name: Build wheels with maturin
        run: |
          mkdir -p dist
          maturin build --release --out dist ${{ matrix.target == 'aarch64' && format('--target {0}-unknown-linux-gnu', matrix.target) || '' }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.target }}-py${{ matrix.python-version }}
          path: dist
          if-no-files-found: error

  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Print debugging information
        run: |
          pwd
          echo "GITHUB_WORKSPACE: $GITHUB_WORKSPACE"
          ls -la $GITHUB_WORKSPACE
          find $GITHUB_WORKSPACE -name "Cargo.toml" | sort
          find $GITHUB_WORKSPACE -name "pyproject.toml" | sort

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin

      - name: Build sdist
        run: |
          mkdir -p dist
          maturin sdist --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist
          if-no-files-found: error

  publish:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest
    # Environment configuration for PyPI trusted publishing
    environment:
      name: pypi
      url: https://pypi.org/p/diffusionx
    # Required permissions for OIDC authentication with PyPI
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
          skip-existing: true